exit
@friendship.errors.messages
@friendship.errors.
params[:friendship]
params[:friendship
params
@friendship
@followee_user.followers.find_by(name:"guest")
@followee_user.followers
@followee_user.following
 @followee_user
exit
@followee_user.following
@followee_user.followees
@followee_user.followee
@followee_user.followees
active_relationships
@followee_user.active_relationships
@followee_user.active_relationship
active_relationship
follower= User.find(params[:follower_id])
@followee_user
active_relationships
 @friendship
exit
params[:follower]
params[:followee]
params[:friendship]
params
@friendship.errors.messages
@friendship.error.messages
   @friendship
exit
@friendship.errors.messages
params[:friendship]
params[:friendship
@friendship
@followee_user.followers
  @followee_user
exit
@follower_user
 @friendship
exit
Friendship.all
Firnedship.all
params
exit
rescue JWT::DecodeError
JWT::DecodeError
decode_token
decode_toekn
decode_token[0]["user_id"]
exit
followee_follows
curr_user.followee_follows
curr_user.followee_follows.new(followee_id: @followed_user.id)
    @followed_user = User.find(params[:friendship][:followee_id])
jkljjkjk
j
exit
active_relationships
curr_user.active_relationships
curr_user.active_relationships.new(followee_id: @followed_user.id)
@followed_user =User.find(params[:friendship][:followee_id])
User.find(params[:friendship][:followee_id])
User.find(params[:friendship][:followee_id]
params[:id]
params
exit
message_params
exit
object.profile_pic.blob.attributes.slice('filename','byte_size').merge(url: image_url)
object.profile_pic.blob.attributes.slice('filename','byte_size')
object.profile_pic.blob.attributes
object.profile_pic
object
exit
projectDir
exit
projectDir+"/app/res/"
projectDir
c
n
exit
idx
exit
i
u
i
u.profile_pic.attach(io: File.open("./app/res/driver2.jpg"), filename: "driver2.jpg", content_type: "image/jpg")
u.profile_pic.attach(io: File.open("./app/res/driver2.jpg"), content_type: "image/jpg")
u.profile_pic.attach(io: File.open("./app/res/driver2.jpg"), filename: "driver#{i+2}.jpg", content_type: "image/jpg")
exit
u.profile_pic
u.profiel_pic
u
exit
params
params[:companies]
params
company_params
@user.companies
@user.update(user_params)
@user=get_user
get_user
exit
@user.companies
@user
@user.update(user_params)
@user.update(user_params
user_params
@user
get_user
exit
@user
params
get_user
exit
get_user
exit
params
params.user
params
get_user
@user
exit
@user.companies
@user
exit
@user.save
user.save
@user.companies
@user
exit
{user:@user,jwt: jwt}
jwt
@user.jwt
@user
jjj
exit
ENV['KEY']
exit
ENV['KEY']
payload
exit
j
)
avatar_url: "https://robohash.org/#{params[:name].gsub(" ", "")}.png?size=300x300&set=set4"
bio: Faker::Hipster.paragraph(2),
balance: 100.0,
password: params[:password],
username: params[:username],
name: params[:name],
user = User.new(
exit
user.authenticate(params[:password])
params[:password]
user = User.find_by(username: params[:username])
User.find_by(username: params[:username])
j
jjj
j
exit
user
exit
user.authenticate(params[:password])
user = User.find_by(username: params[:username])
user.authenticate(params[:password])
User.find_by(username: params[:username])
exit
User.find_by(username: params[:username])
exit
c
message_params
params
c
params
c
params
c
params
c
params
c
params
c
@user.companies
c
@user.companies
c
@user.companies[1]
@user.companies[0]
@user.companies
@user.companies.count
@user
companies
c
params
